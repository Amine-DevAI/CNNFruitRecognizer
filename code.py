{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea9af446-dab9-440b-82f6-b2e167fe90a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch \n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision import datasets,transforms \n",
    "\n",
    "device = torch.device(\"cpu\")\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((64,64)),\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize(mean=[0.5,0.5,0.5], std=[0.5,0.5,0.5])\n",
    "\n",
    "])\n",
    "\n",
    "\n",
    "train_dir = '~/datasets/fruits/fruits-360_100x100/fruits-360/Training'\n",
    "test_dir  = '~/datasets/fruits/fruits-360_100x100/fruits-360/Test'\n",
    "\n",
    "\n",
    "train_dataset = datasets.ImageFolder(train_dir, transform = transform)\n",
    "test_dataset = datasets.ImageFolder(test_dir, transform = transform)\n",
    "\n",
    "train_loader = DataLoader(train_dataset , batch_size = 64 ,shuffle=True) \n",
    "test_loader = DataLoader(test_dataset , batch_size = 64 ,shuffle=True)\n",
    "\n",
    "num_classes = len(train_dataset.classes)\n",
    "\n",
    "print(f\"Number of classes :{num_classes}\")\n",
    "\n",
    "import torch.nn as nn\n",
    "class SimpleCNN (nn.Module):\n",
    "    def __init__(self,num_classes):\n",
    "        super(SimpleCNN,self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3,16,kernel_size = 3, padding =1)\n",
    "        self.conv2= nn.Conv2d(16,32,kernel_size = 3, padding =1)\n",
    "        self.pool = nn.MaxPool2d(2,2)\n",
    "        self.fc1 = nn.Linear(32*16*16,128)\n",
    "        self.fc2 = nn.Linear(128,num_classes)\n",
    "\n",
    "    def forward(self,X):\n",
    "        X = self.pool(F.relu(self.conv1(X)))\n",
    "        X = self.pool(F.relu(self.conv2(X)))\n",
    "        X = X.view(X.size(0),-1)\n",
    "        X = F.relu(self.fc1(X))\n",
    "        X = self.fc2(X)\n",
    "        return X \n",
    " \n",
    "model = SimpleCNN(num_classes).to(device)      \n",
    "\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(),lr = 0.001)\n",
    "\n",
    "\n",
    "\n",
    "num_epochs = 5 \n",
    "\n",
    "for epoch in range(num_eporchs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for images,labels in train_loader:\n",
    "        images,labels = images.to(device),labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(images)\n",
    "        loss = criterion(outputs,labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        running_loss += loss.item()\n",
    "    print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}\")\n",
    "\n",
    "model.eval()\n",
    "correct = 0\n",
    "total = 0\n",
    "with torch.no_grad():\n",
    "    for images, labels in test_loader:\n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "print(f'Test Accuracy: {100 * correct / total:.2f}%')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
